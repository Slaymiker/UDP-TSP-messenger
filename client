import tkinter as tk
import socket
import threading
import pyaudio
import sys

# ==== Настройки ====
SERVER_IP = "26.46.53.93"
TEXT_PORT = 5000
AUDIO_PORT = 5001

CHUNK = 1024
FORMAT = pyaudio.paInt16
CHANNELS = 1
RATE = 44100

class ChatApp:
    def __init__(self, root):
        self.root = root
        self.root.title("VoiceChat")

        self.msg_list = tk.Listbox(root, height=15, width=50)
        self.msg_list.pack()

        self.entry_field = tk.Entry(root)
        self.entry_field.pack()

        send_button = tk.Button(root, text="Отправить", command=self.send_message)
        send_button.pack()

        self.mute_var = tk.BooleanVar()
        self.mute_checkbox = tk.Checkbutton(root, text="Выключить микрофон", variable=self.mute_var)
        self.mute_checkbox.pack()

        self.connect_to_server()
        self.setup_audio()

    def connect_to_server(self):
        self.text_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.text_socket.connect((SERVER_IP, TEXT_PORT))

        self.audio_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        self.audio_socket.bind(("0.0.0.0", 0))  # Локальный порт для отправки

        self.recv_thread = threading.Thread(target=self.receive_messages)
        self.recv_thread.start()

    def setup_audio(self):
        self.p = pyaudio.PyAudio()
        self.stream_in = self.p.open(format=FORMAT,
                                     channels=CHANNELS,
                                     rate=RATE,
                                     input=True,
                                     frames_per_buffer=CHUNK)
        self.stream_out = self.p.open(format=FORMAT,
                                      channels=CHANNELS,
                                      rate=RATE,
                                      output=True,
                                      frames_per_buffer=CHUNK)

        self.audio_recv_thread = threading.Thread(target=self.receive_audio)
        self.audio_recv_thread.start()

        self.audio_send_thread = threading.Thread(target=self.send_audio)
        self.audio_send_thread.start()

    def receive_messages(self):
        while True:
            try:
                msg = self.text_socket.recv(1024).decode("utf-8")
                self.msg_list.insert(tk.END, f"Собеседник: {msg}")
            except:
                break

    def send_message(self):
        msg = self.entry_field.get()
        self.entry_field.delete(0, tk.END)
        self.text_socket.sendall(msg.encode("utf-8"))
        self.msg_list.insert(tk.END, f"Вы: {msg}")

    def receive_audio(self):
        with socket.socket(socket.AF_INET, socket.SOCK_DGRAM) as s:
            recv_port = 5002  # Порт, на который мы будем получать аудио
            s.bind(("26.46.53.93", recv_port))
            print(f"[+] Ожидаем голосовые пакеты на порту {recv_port}")
            while True:
                try:
                    data, addr = s.recvfrom(65535)
                    print(f"[DEBUG] Получено {len(data)} байт от {addr}")  # Отладка
                    self.stream_out.write(data)
                except Exception as e:
                    print(f"[ERROR] Ошибка при воспроизведении: {e}")

    def send_audio(self):
        print("[+] Начинаем отправку аудио...")
        while True:
            if not self.mute_var.get():
                try:
                    data = self.stream_in.read(CHUNK)
                    self.audio_socket.sendto(data, (SERVER_IP, AUDIO_PORT))
                except Exception as e:
                    print(f"[ERROR] Ошибка записи аудио: {e}")

# ==== Запуск клиента ====
if __name__ == "__main__":
    root = tk.Tk()
    app = ChatApp(root)
    root.mainloop()
